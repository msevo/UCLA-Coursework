Multithreaded program written in C to maximize efficiency of linked list operations, while testing race conditions and synchronization.

File Descriptions
lab2_list.c: C source file that implements a multithreaded program that adds and removed elements from a linked list, allowing us to test race conditions and synchronization. Also has option to divide list into sublists for increased multithreaded performance.

lab2b_list.csv: contains output of lab2_list.c made with Makefile tests.

lab2_list.gp: script to create desired graphs described below.

SortedList.h: provides interface for linked list.

SortedList.c: provides implementation of interface described in SortedList.h for linked list.

profile.out: execution profiling report showing where time was spent in the un-partitioned spin-lock implementation.

lab2b_1.png: graph of throughput vs. number of threads for mutex and spin-lock synchronized list operations.
lab2b_2.png: graph of mean time per mutex wait and mean time per operation for mutex-synchronized list operations.
lab2b_3.png: graph of successful iterations vs. threads for each synchronization method.
lab2b_4.png: graph of throughput vs. number of threads for mutex synchronized partitioned lists.
lab2b_5.png: graph of throughput vs. number of threads for spin-lock-synchronized partitioned lists.

Makefile: This is a simple makefile with the basic default, clean, and and dist targets, as well as the tests, graphs, and profile targets to run test cases, build the desired graphs, and build and execution profiling report.
